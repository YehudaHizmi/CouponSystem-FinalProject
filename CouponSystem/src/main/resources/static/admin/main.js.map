{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/admin-area-customer/admin-area-customer.component.css","webpack:///./src/app/components/admin-area-customer/admin-area-customer.component.html","webpack:///./src/app/components/admin-area-customer/admin-area-customer.component.ts","webpack:///./src/app/components/admin-area/admin-area.component.css","webpack:///./src/app/components/admin-area/admin-area.component.html","webpack:///./src/app/components/admin-area/admin-area.component.ts","webpack:///./src/app/components/common/Company.ts","webpack:///./src/app/components/common/Customer.ts","webpack:///./src/app/components/common/header/header.component.css","webpack:///./src/app/components/common/header/header.component.html","webpack:///./src/app/components/common/header/header.component.ts","webpack:///./src/app/components/common/messages/messages.component.html","webpack:///./src/app/components/common/messages/messages.component.ts","webpack:///./src/app/components/create-company/create-company.component.css","webpack:///./src/app/components/create-company/create-company.component.html","webpack:///./src/app/components/create-company/create-company.component.ts","webpack:///./src/app/components/create-customer/create-customer.component.css","webpack:///./src/app/components/create-customer/create-customer.component.html","webpack:///./src/app/components/create-customer/create-customer.component.ts","webpack:///./src/app/components/get-all-companies/get-all-companies.component.css","webpack:///./src/app/components/get-all-companies/get-all-companies.component.html","webpack:///./src/app/components/get-all-companies/get-all-companies.component.ts","webpack:///./src/app/components/get-company-by-id/get-company-by-id.component.css","webpack:///./src/app/components/get-company-by-id/get-company-by-id.component.html","webpack:///./src/app/components/get-company-by-id/get-company-by-id.component.ts","webpack:///./src/app/components/get-customer-by-id/get-customer-by-id.component.css","webpack:///./src/app/components/get-customer-by-id/get-customer-by-id.component.html","webpack:///./src/app/components/get-customer-by-id/get-customer-by-id.component.ts","webpack:///./src/app/services/web-api-admin.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,gCAAgC,yBAAyB,KAAK,K;;;;;;;;;;;ACA9D,6DAA6D,kBAAkB,4G;;;;;;;;;;;;;;;;;;;;;ACArC;AAO1C;IALA;QAME,UAAK,GAAG,mBAAmB,CAAC;IAC9B,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACM;AAC+C;AAC1C;AACA;AACc;AACvB;AACG;AACI;AACoB;AACgC;AAEpD;AACE;AAC2B;AACjC;AACiC;AAC/E,iGAAiG;AACf;AACtC;AACQ;AAC0B;AACpC;AACK;AACsD;AACnD;AAC0D;AACJ;AACP;AACb;AACX;AACzE,mEAAmE;AAEzB;AACC;AAE3C,6DAA6D;AAC7D,mDAAmD;AACnD,6CAA6C;AAoF7C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAlFrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,0GAAsB;gBACtB,mHAAwB;gBACxB,0BAA0B;gBAC1B,+FAAkB;gBAClB,2FAAe;gBAChB,qBAAqB;gBACpB,kHAAuB;gBACxB,yHAA0B;gBAC1B,qHAAwB;gBACxB,8GAAuB;gBACvB,iGAAiB;aACjB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,iEAAe;gBACf,iEAAe;gBACf,0DAAW;gBACX,wDAAU;gBACV,2DAAY;gBACZ,+DAAc;gBACd,gEAAc;gBACd,kEAAe;gBACf,+DAAc;gBACd,4DAAW;gBACX,4DAAY;gBACZ,6FAAuB;gBACvB,0DAAW;gBACX,gEAAe;gBACf,kEAAe;gBACf,wDAAU;gBACV,gEAAc;gBACd,0DAAW;gBACX,kEAAmB;gBACnB,uBAAuB;gBACvB,uBAAuB;gBACvB,eAAe;gBACf,kBAAkB;gBAClB,iBAAiB;gBACjB,0BAA0B;gBAC1B,6DAAY,CAAC,OAAO,CAChB;oBACE;wBACI,IAAI,EAAE,cAAc;wBACpB,SAAS,EAAE,+FAAkB;qBAChC;oBACD;wBACE,IAAI,EAAE,YAAY;wBAClB,SAAS,EAAE,0GAAsB;qBAClC;oBACD;wBACE,IAAI,EAAE,YAAY;wBAClB,SAAS,EAAE,kHAAuB;qBACnC;oBACD;wBACE,IAAI,EAAE,cAAc;wBACpB,SAAS,EAAE,yHAA0B;qBACtC;oBACD;wBACE,IAAI,EAAE,aAAa;wBACnB,SAAS,EAAE,8GAAuB;qBACnC;oBACD;wBACE,IAAI,EAAE,aAAa;wBACnB,SAAS,EAAE,qHAAwB;qBACpC;oBACD;wBACE,IAAI,EAAE,EAAE;wBACR,UAAU,EAAE,eAAe;wBAC3B,SAAS,EAAE,MAAM;qBAClB;iBACF,CACJ;gBACD,oBAAoB;aAGrB;YACD,SAAS,EAAE,CAAC,mFAAkB,EAAE,2DAAc,EAAE,EAAE,OAAO,EAAE,iEAAgB,EAAE,QAAQ,EAAE,qEAAoB,EAAE,CAAE;YAC/G,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AC3HtB,+BAA+B,mBAAmB,yBAAyB,wBAAwB,yBAAyB,iBAAiB,KAAK,K;;;;;;;;;;;ACAlJ,2WAA2W,kBAAkB,qNAAqN,mBAAmB,8bAA8b,oBAAoB,ovFAAovF,unBAAunB,UAAU,KAAK,mBAAmB,mrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAv5I;AAC+B;AAC1B;AACJ;AACsB;AACxC;AAO5B;IAgBE;;;;;MAKE;IACF,oCAAoB,WAAwB,EAAU,YAAgC,EAAU,cAA8B;QAA1G,gBAAW,GAAX,WAAW,CAAa;QAAU,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QApB9H,cAAS,GAAe,EAAE,CAAC;QAE3B,YAAO,GAAG,+BAA+B,CAAC;QAC1C,aAAQ,GAAa,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAMhD,qBAAgB,GAAG,QAAQ,CAAC;QAC5B,sBAAiB,GAAG,QAAQ,CAAC;QAW1B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,YAAY,CAAC;QAEtC,IAAI,CAAC,wBAAwB,GAAG,WAAW,CAAC,KAAK,CAAE;YAClD,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;IACL,CAAC;IAED,8FAA8F;IAC9F,6CAAQ,GAAR;QACE,mCAAC,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;YACzB,mCAAC,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;gBAC1B,mCAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;gBAC3C,IAAM,KAAK,GAAG,mCAAC,CAAC,mCAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;oBACtC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAC7B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEJ,gBAAgB;QACf,qEAAqE;QACrE,qEAAqE;QACrE,oEAAoE;QACpE,KAAK;IACP,CAAC;IAED,2FAA2F;IAC3F,oDAAe,GAAf;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;QACtC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;IAClC,CAAC;IAED,4FAA4F;IAC5F,gDAAW,GAAX,UAAY,KAAK;QACf,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;IACpC,CAAC;IAED,oFAAoF;IACpF,kDAAa,GAAb,UAAc,IAAc;QAC1B,IAAM,QAAQ,GAAG,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5C,iCAAiC;QACjC,GAAG,CAAC,CAAC,IAAM,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAED,qEAAqE;IAC7D,mDAAc,GAAtB,UAAuB,MAAc;QACnC,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC;QACxC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC;QACvD,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,CAAC;QACzC,CAAC;IACH,CAAC;IAED;;;MAGE;IACF,yCAAI,GAAJ;QAAA,iBAyBC;QAxBC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC9D,UAAC,IAAI;gBACH,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,KAAI,CAAC,YAAY;wBACtG,yBAAyB,EAAC,CAAC,CAAC;YAC9B,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACtG,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC9D;gBACE,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,sBAAsB,EAAE,MAAM,EAAE,KAAI,CAAC,YAAY;wBACxG,2BAA2B,EAAC,CAAC,CAAC;YAChC,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,yBAAyB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QACP,CAAC;QACD,wBAAwB;QACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,6GAA6G;IAC5G,2CAAM,GAAN;QAAA,iBAeC;QAdA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,CACnE;gBACE,KAAI,CAAC,eAAe,EAAE,CAAC;gBACtB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,sBAAsB,EAAE,MAAM,EAAE,KAAI,CAAC,YAAY;wBACxG,2BAA2B,EAAC,CAAC,CAAC;YAClC,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,yBAAyB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QACP,CAAC;QACA,wBAAwB;QACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEF,oGAAoG;IACpG,oDAAe,GAAf;QAAA,iBAYC;QAXC,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAClD,UAAC,IAAI;YACH,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YAC7B,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5C,uCAAuC;YACvC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4EAA4E;IACpE,6CAAQ,GAAhB,UAAiB,UAAsB;QACrC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAM,EAAE,CAAM;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnC,MAAM,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,CAAC,CAAC;YACX,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAxKU,0BAA0B;QALtC,+DAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;;;SAGpC,CAAC;yCAuBiC,0DAAW,EAAwB,kFAAkB,EAA0B,0DAAc;OAtBnH,0BAA0B,CAyKtC;IAAD,iCAAC;CAAA;AAzKsC;;;;;;;;;;;;ACZvC,+BAA+B,mBAAmB,yBAAyB,wBAAwB,yBAAyB,iBAAiB,KAAK,K;;;;;;;;;;;ACAlJ,iVAAiV,kBAAkB,+LAA+L,mBAAmB,sZAAsZ,oBAAoB,spHAAspH,0lBAA0lB,UAAU,KAAK,mBAAmB,uoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACArsK;AACgC;AAC1B;AACN;AACwB;AACxC;AAO5B;IAgBE,6DAA6D;IAE7D;;;;;MAKE;IACF,4BAAoB,WAAwB,EAAU,YAAgC,EAAU,cAA8B;QAA1G,gBAAW,GAAX,WAAW,CAAa;QAAU,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QArB9H,mBAAmB;QACnB,cAAS,GAAc,EAAE,CAAC;QAE1B,YAAO,GAAG,8BAA8B,CAAC;QACzC,YAAO,GAAY,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAMjD,qBAAgB,GAAG,QAAQ,CAAC;QAC5B,sBAAiB,GAAG,QAAQ,CAAC;QAW3B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,WAAW,CAAC;QAErC,IAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC,KAAK,CAAE;YAChD,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,OAAO,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7E,CAAC,CAAC;IAEL,CAAC;IAED,8FAA8F;IAC9F,qCAAQ,GAAR;QACE,mCAAC,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC;YACxB,mCAAC,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;gBAC1B,IAAM,KAAK,GAAG,mCAAC,CAAC,mCAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxC,mCAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;oBACtC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAC7B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBACjC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,gBAAgB;QAChB,sEAAsE;QACtE,sEAAsE;QACtE,sEAAsE;QACtE,sEAAsE;QACtE,KAAK;IACP,CAAC;IAED,0FAA0F;IAC1F,4CAAe,GAAf;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;QAEhC,6DAA6D;QAC7D,0BAA0B;QAC1B,0CAA0C;QAC1C,iCAAiC;QACjC,wDAAwD;QACxD,MAAM;IACR,CAAC;IAED,2FAA2F;IAC3F,wCAAW,GAAX,UAAY,KAAK;QACf,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,wCAAwC;QACxC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;IACpC,CAAC;IAGD,mFAAmF;IACnF,yCAAY,GAAZ,UAAa,IAAa;QACxB,IAAM,QAAQ,GAAG,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/C,iCAAiC;QACjC,GAAG,CAAC,CAAC,IAAM,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAED,qEAAqE;IAC7D,2CAAc,GAAtB,UAAuB,MAAc;QACnC,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,CAAC;QACtD,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;QACnD,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC;QACxC,CAAC;IACH,CAAC;IAED;;;MAGE;IACF,iCAAI,GAAJ;QAAA,iBAyBC;QAxBC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC5D,UAAC,IAAI;gBACH,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW;wBACpG,yBAAyB,EAAC,CAAC,CAAC;YAC9B,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,sBAAsB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACrG,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAC5D,UAAC,IAAI;gBACH,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW;wBACtG,2BAA2B,EAAC,CAAC,CAAC;YAChC,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;QACP,CAAC;QACD,uBAAuB;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,2GAA2G;IAC1G,mCAAM,GAAN;QAAA,iBAeC;QAdA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,SAAS,CACpE,UAAC,IAAI;gBACH,KAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW;wBACtG,2BAA2B,EAAC,CAAC,CAAC;YAChC,CAAC,EACD,UAAC,KAAK;gBACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;QACL,CAAC;QACA,uBAAuB;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,oGAAoG;IACrG,4CAAe,GAAf;QAAA,iBAYC;QAXC,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAClD,UAAC,IAAI;YACH,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YAC7B,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5C,uCAAuC;YACvC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2EAA2E;IACnE,qCAAQ,GAAhB,UAAiB,UAAqB;QACpC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAM,EAAE,CAAM;YAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,CAAC,CAAC,CAAC;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnC,MAAM,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,CAAC,CAAC;YACX,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAvLU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAyBiC,0DAAW,EAAwB,kFAAkB,EAA0B,0DAAc;OAxBnH,kBAAkB,CAwL9B;IAAD,yBAAC;CAAA;AAxL8B;;;;;;;;;;;;;ACV/B;AAAA;AAAA;IAEE,iBAAmB,EAAU,EAAS,QAAgB,EAAS,KAAa,EAAS,QAAgB,EAAS,OAAkB;QAA7G,OAAE,GAAF,EAAE,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAW;IAAG,CAAC;IAEtI,cAAC;AAAD,CAAC;;;;;;;;;;;;;;ACJD;AAAA;AAAA;IAEE,kBAAmB,EAAU,EAAS,QAAgB,EAAS,QAAgB,EAAS,OAAkB;QAAvF,OAAE,GAAF,EAAE,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAW;IAAG,CAAC;IAEhH,eAAC;AAAD,CAAC;;;;;;;;;;;;;ACND,0BAA0B,uBAAuB,8BAA8B,KAAK,uBAAuB,yBAAyB,kBAAkB,cAAc,aAAa,yBAAyB,mBAAmB,KAAK,K;;;;;;;;;;;ACAlO,yjC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,8CAA8C;AACI;AACS;AACoB;AAO/E;IAOE,yBAAoB,YAAgC,EAAU,cAA8B;QAAxE,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAC1F,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACtD,CAAC;IAED,kCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG;YACb;gBACE,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE;oBACH,EAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,eAAe,EAAC;oBAC7E,EAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,aAAa,EAAC;oBAC5E,EAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,aAAa,EAAC;iBAE/E;aACJ;YACD;gBACM,KAAK,EAAE,UAAU;gBACjB,KAAK,EAAE;oBACL,EAAC,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,eAAe,EAAC;oBAC7E,EAAC,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,cAAc,EAAC;oBAC9E,EAAC,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,cAAc,EAAC;iBAC9E;aACF;SACF,CAAC;IACJ,CAAC;IAEM,gCAAM,GAAb;QAAA,iBASC;QARC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CACpE,UAAC,IAAI;YACH,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,kCAAkC,EAAC,CAAC,CAAC;YAC9G,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAI,CAAC,eAAe,CAAC;QAC9C,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,mBAAmB,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACP,CAAC;IA1CU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAQkC,kFAAkB,EAA0B,8DAAc;OAPjF,eAAe,CA4C3B;IAAD,sBAAC;CAAA;AA5C2B;;;;;;;;;;;;ACV5B,yTAAyT,iBAAiB,sBAAsB,gBAAgB,oc;;;;;;;;;;;;;;;;;;;;;;;;;;ACAtU;AACY;AAKtD;IAIE,2BAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAEtD,qCAAS,GAAT;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,iCAAK,GAAL;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAhBU,iBAAiB;QAH7B,+DAAS,CAAC;;SAEV,CAAC;yCAKoC,0DAAc;OAJvC,iBAAiB,CAiB7B;IAAD,wBAAC;CAAA;AAjB6B;;;;;;;;;;;;ACN9B,+BAA+B,mBAAmB,yBAAyB,wBAAwB,yBAAyB,iBAAiB,KAAK,K;;;;;;;;;;;ACAlJ,g8F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6C;AACC;AAC8B;AAC1B;AACkB;AACxC;AAQ5B;IAQI;;;;;IAKA;IACF,gCAAoB,WAAwB,EAAU,YAAgC,EAAU,cAA8B;QAA1G,gBAAW,GAAX,WAAW,CAAa;QAAU,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAZ9H,eAAU,GAAY,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACpD,YAAO,GAAG,sBAAsB,CAAC;QAY9B,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,KAAK,CAAE;YAC3C,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,OAAO,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7E,CAAC,CAAC;IACL,CAAC;IAED,2DAA2D;IAC3D,sHAAsH;IAC/G,8CAAa,GAApB;QAAA,iBAYC;QAXC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAE/D,UAAC,IAAI;YACH,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,mBAAmB,EAAE,MAAM,EAAE,KAAI,CAAC,UAAU,CAAC,QAAQ;oBAC3G,yBAAyB,EAAC,CAAC,CAAC;QAC/B,CAAC,EACD,UAAC,KAAK;YACH,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,sBAAsB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAChD,+BAA+B;IACnC,CAAC;IAED,8FAA8F;IAC9F,yCAAQ,GAAR;QACE,mCAAC,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;YAC1B,mCAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;YAC3C,IAAM,KAAK,GAAG,mCAAC,CAAC,mCAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;gBACtC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAlDU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAeiC,0DAAW,EAAwB,kFAAkB,EAA0B,0DAAc;OAdnH,sBAAsB,CAoDlC;IAAD,6BAAC;CAAA;AApDkC;;;;;;;;;;;;ACbnC,+BAA+B,mBAAmB,yBAAyB,wBAAwB,yBAAyB,iBAAiB,KAAK,K;;;;;;;;;;;ACAlJ,w5DAAw5D,yP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA32D;AAC+B;AAC5B;AACc;AACM;AACxC;AAO5B;IAQE;;;;;MAKE;IACF,iCAAoB,WAAwB,EAAU,YAAgC,EAAU,cAA8B;QAA1G,gBAAW,GAAX,WAAW,CAAa;QAAU,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAX9H,gBAAW,GAAa,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACnD,YAAO,GAAG,uBAAuB,CAAC;QAWhC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,YAAY,CAAC;QAEtC,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,KAAK,CAAE;YAC3C,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,UAAU,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;IAEL,CAAC;IAED,4DAA4D;IAC5D,wHAAwH;IACjH,gDAAc,GAArB;QAAA,iBAWC;QAVC,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAEjE,UAAC,IAAI;YACH,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,KAAI,CAAC,WAAW,CAAC,QAAQ;oBAC7G,yBAAyB,EAAC,CAAC,CAAC;QAC/B,CAAC,EACD,UAAC,KAAK;YACH,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC;IAGD,8FAA8F;IAC9F,0CAAQ,GAAR;QACE,mCAAC,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;YAC1B,mCAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;YAC3C,IAAM,KAAK,GAAG,mCAAC,CAAC,mCAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;gBACtC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAjDyB;QAAzB,+DAAS,CAAC,aAAa,CAAC;;gEAAa;IAF3B,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;;;SAGhC,CAAC;yCAeiC,0DAAW,EAAwB,kFAAkB,EAA0B,0DAAc;OAdnH,uBAAuB,CAqDnC;IAAD,8BAAC;CAAA;AArDmC;;;;;;;;;;;;ACZpC,mB;;;;;;;;;;;ACAA,uB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6C;AAC+B;AAC1B;AASlD;IAWE;;;;MAIE;IACF,kCAAoB,kBAAsC,EAAU,cAA8B;QAA9E,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAEtG,2CAAQ,GAAR;QACE,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,+CAAY,GAAZ;QAAA,iBAQC;QAPC,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAC,SAAS,CACxD,UAAC,IAAI;YACH,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC,EACC,UAAC,KAAK;YACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gDAAa,GAAb,UAAc,OAAgB;QAC1B,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAC3D,cAAO,CAAC,CACX,CAAC;QACF,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,gDAAa,GAAb,UAAc,KAAY,EAAE,OAAgB;QAC1C,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,KAAK,CAAC,cAAc,EAAE,CAAC;IACzB,CAAC;IAED,+CAAY,GAAZ,UAAa,KAAK;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,CAAC;IACH,CAAC;IAED,+CAAY,GAAZ;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IA1DU,wBAAwB;QALpC,+DAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;;;SAGlC,CAAC;yCAiBwC,kFAAkB,EAA0B,0DAAc;OAhBvF,wBAAwB,CA6DpC;IAAD,+BAAC;CAAA;AA7DoC;;;;;;;;;;;;ACXrC,mB;;;;;;;;;;;ACAA,4mD;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6C;AACC;AAC8B;AAC1B;AAOlD;IAME;;;;MAIE;IACF,iCAAoB,YAAgC,EAAU,cAA8B;QAAxE,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAT5F,qBAAgB,GAAY,IAAI,uDAAO,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAE1D,YAAO,GAAG,qBAAqB,CAAC;QAQ9B,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC;IAEzC,CAAC;IAED,mHAAmH;IAC5G,4CAAU,GAAjB;QAAA,iBAQC;QAPC,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,SAAS,CACzE,UAAC,IAAI;YACH,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAQ,GAAR;QACA,oBAAoB;QACpB,8EAA8E;QAC9E,2FAA2F;QAC3F,sFAAsF;QACtF,iFAAiF;QACjF,OAAO;QACP,IAAI;IACJ,CAAC;IAnCU,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;;;SAGlC,CAAC;yCAYkC,kFAAkB,EAA0B,0DAAc;OAXjF,uBAAuB,CAoCnC;IAAD,8BAAC;CAAA;AApCmC;;;;;;;;;;;;ACVpC,mB;;;;;;;;;;;ACAA,s7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA4E;AAC5B;AACE;AACL;AAO7C;IAME;;;;MAIE;IACF,kCAAoB,YAAgC,EAAU,cAA8B;QAAxE,iBAAY,GAAZ,YAAY,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAT5F,sBAAiB,GAAa,IAAI,yDAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAEzD,YAAO,GAAG,sBAAsB,CAAC;QAQ/B,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,YAAY,CAAC;IAC1C,CAAC;IAED,qHAAqH;IAC9G,8CAAW,GAAlB;QAAA,iBASC;QARC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,SAAS,CAC3E,UAAC,IAAI;YACH,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACvC,CAAC,EACD,UAAC,KAAK;YACJ,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2CAAQ,GAAR;QACE,kBAAkB;QAClB,4EAA4E;QAC5E,0FAA0F;QAC1F,uFAAuF;QACvF,KAAK;IACP,CAAC;IAjCU,wBAAwB;QALpC,+DAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;;;SAGnC,CAAC;yCAYkC,kFAAkB,EAA0B,0DAAc;OAXjF,wBAAwB,CAmCpC;IAAD,+BAAC;CAAA;AAnCoC;;;;;;;;;;;;;;;;;;;;;;;;;;ACTgB;AACV;AAO3C;IASE,4BAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAL/B,qBAAgB,GAAG,sCAAsC,CAAC;QAC1D,sBAAiB,GAAG,uCAAuC,CAAC;QAC5D,oBAAe,GAAG,wBAAwB,CAAC;QAKzC,IAAI,CAAC,WAAW,GAAG;YACjB,EAAE,WAAW,EAAE,IAAI,EAAS,KAAK,EAAE,IAAI,EAAS,IAAI,EAAE,QAAQ,EAAG,QAAQ,EAAE,OAAO,EAAE;YACpF,EAAE,WAAW,EAAE,MAAM,EAAO,KAAK,EAAE,UAAU,EAAG,IAAI,EAAE,MAAM,EAAK,QAAQ,EAAE,MAAM,EAAE;YACnF,EAAE,WAAW,EAAE,UAAU,EAAG,KAAK,EAAE,UAAU,EAAG,IAAI,EAAE,MAAM,EAAK,QAAQ,EAAE,MAAM,EAAE;YACnF,EAAE,WAAW,EAAE,OAAO,EAAM,KAAK,EAAE,OAAO,EAAM,IAAI,EAAE,OAAO,EAAI,QAAQ,EAAE,MAAM,EAAE;SACpF,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG;YAClB,EAAE,WAAW,EAAE,IAAI,EAAS,KAAK,EAAE,IAAI,EAAS,IAAI,EAAE,QAAQ,EAAG,QAAQ,EAAE,OAAO,EAAE;YACpF,EAAE,WAAW,EAAE,MAAM,EAAO,KAAK,EAAE,UAAU,EAAG,IAAI,EAAE,MAAM,EAAI,QAAQ,EAAE,MAAM,EAAE;YAClF,EAAE,WAAW,EAAE,UAAU,EAAG,KAAK,EAAE,UAAU,EAAG,IAAI,EAAE,MAAM,EAAI,QAAQ,EAAE,MAAM,EAAE;SACnF,CAAC;IACJ,CAAC;IAGD,oFAAoF;IACpF,oFAAoF;IACpF,oFAAoF;IAEpF,oCAAoC;IAC7B,mDAAsB,GAA7B;QACE,2EAA2E;QAC3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,CAAC;IACpE,CAAC;IAEM,kDAAqB,GAA5B,UAA6B,EAAU;QACrC,2EAA2E;QAC3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,cAAc,GAAG,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,4BAA4B;IACrB,iDAAoB,GAA3B,UAA4B,OAAgB;QAC1C,mFAAmF;QACnF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED,6BAA6B;IACtB,iDAAoB,GAA3B,UAA4B,OAAgB;QAC1C,IAAM,OAAO,GAAG,IAAI,4DAAc,CAAC;YACjC,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;QACH,mGAAmG;QACnG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAC5F,CAAC;IAEM,iDAAoB,GAA3B,UAA4B,OAAgB;QAC1C,gGAAgG;QAChG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACzF,CAAC;IAED,oFAAoF;IACpF,qFAAqF;IACrF,oFAAoF;IAEpF,oCAAoC;IAC7B,mDAAsB,GAA7B;QACE,4EAA4E;QAC5E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,mBAAmB,CAAC,CAAC;IACrE,CAAC;IAEM,mDAAsB,GAA7B,UAA8B,EAAU;QACtC,6EAA6E;QAC7E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,eAAe,GAAG,EAAE,CAAC,CAAC;IACtE,CAAC;IAED,4BAA4B;IACrB,kDAAqB,GAA5B,UAA6B,QAAkB;QAC7C,sFAAsF;QACtF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IAC/E,CAAC;IAED,6BAA6B;IACtB,kDAAqB,GAA5B,UAA6B,QAAkB;QAC7C,IAAM,OAAO,GAAG,IAAI,4DAAc,CAAC;YACjC,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QACH,sGAAsG;QACtG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,GAAG,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAC/F,CAAC;IAEM,kDAAqB,GAA5B,UAA6B,QAAkB;QAC7C,oGAAoG;QACpG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC7F,CAAC;IAED,oFAAoF;IACpF,oFAAoF;IACpF,oFAAoF;IAC7E,0CAAa,GAApB,UAAqB,OAAO,EAAE,QAAQ;QACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC5E,CAAC;IArGU,kBAAkB;QAH9B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAU2B,kDAAI;OATpB,kBAAkB,CA0G9B;IAAD,yBAAC;CAAA;AA1G8B;;;;;;;;;;;;;ACT/B;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"outer-outlet {\\r\\n  margin-top: 1000px;\\r\\n}\\r\\n\"","module.exports = \"<p-toast position=\\\"top-right\\\" [style]=\\\"{marginTop: '80px'}\\\"></p-toast>\\n<app-header></app-header>\\n<br>\\n<br>\\n<br>\\n<br>\\n<br>\\n<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CouponSystemAdmin';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { CreateCompanyComponent } from './components/create-company/create-company.component';\nimport { AccordionModule } from 'primeng/accordion';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { ButtonModule } from 'primeng/button';\nimport { PasswordModule } from 'primeng/password';\nimport { WebApiAdminService } from './services/web-api-admin.service';\nimport { GetAllCompaniesComponent } from './components/get-all-companies/get-all-companies.component';\n\nimport { DataViewModule } from 'primeng/dataview';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { DropdownModule, PanelModule, DataTableModule } from 'primeng/primeng';\nimport { DialogModule } from 'primeng/dialog';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// import { DeleteCompanyComponent } from './components/delete-company/delete-company.component';\nimport { AdminAreaComponent } from './components/admin-area/admin-area.component';\nimport { TableModule } from 'primeng/table';\nimport { PanelMenuModule } from 'primeng/panelmenu';\nimport { HeaderComponent } from './components/common/header/header.component';\nimport { MenuModule } from 'primeng/menu';\nimport { RouterModule } from '@angular/router';\nimport { GetCompanyByIdComponent } from './components/get-company-by-id/get-company-by-id.component';\nimport { FieldsetModule } from 'primeng/fieldset';\nimport { AdminAreaCustomerComponent } from './components/admin-area-customer/admin-area-customer.component';\nimport { GetCustomerByIdComponent } from './components/get-customer-by-id/get-customer-by-id.component';\nimport { CreateCustomerComponent } from './components/create-customer/create-customer.component';\nimport { MessagesComponent } from './components/common/messages/messages.component';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n// import { ShowHidePasswordModule } from 'ngx-show-hide-password';\n\nimport {ToastModule} from 'primeng/toast';\nimport {MessageService} from 'primeng/api';\n\n// import {ConfirmDialogModule} from 'primeng/confirmdialog';\n// import {ConfirmationService} from 'primeng/api';\n// import {ToastModule} from 'primeng/toast';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateCompanyComponent,\n    GetAllCompaniesComponent,\n    // DeleteCompanyComponent,\n    AdminAreaComponent,\n    HeaderComponent,\n   // MessagesComponent,\n    GetCompanyByIdComponent,\n   AdminAreaCustomerComponent,\n   GetCustomerByIdComponent,\n   CreateCustomerComponent,\n   MessagesComponent\n  ],\n  imports: [\n    BrowserModule,\n    AccordionModule,\n    InputTextModule,\n    FormsModule,\n    HttpModule,\n    ButtonModule,\n    PasswordModule,\n    DataViewModule,\n    PaginatorModule,\n    DropdownModule,\n    PanelModule,\n    DialogModule,\n    BrowserAnimationsModule,\n    TableModule,\n    DataTableModule,\n    PanelMenuModule,\n    MenuModule,\n    FieldsetModule,\n    ToastModule,\n    ReactiveFormsModule,\n    // ConfirmDialogModule,\n    // ConfirmationService,\n    // ToastModule,\n    // MessagesModule,\n    // MessageModule,\n    // ShowHidePasswordModule,\n    RouterModule.forRoot (\n        [\n          {\n              path: 'allCompanies',\n              component: AdminAreaComponent\n          },\n          {\n            path: 'addCompany',\n            component: CreateCompanyComponent\n          },\n          {\n            path: 'getCompany',\n            component: GetCompanyByIdComponent\n          },\n          {\n            path: 'allCustomers',\n            component: AdminAreaCustomerComponent\n          },\n          {\n            path: 'addCustomer',\n            component: CreateCustomerComponent\n          },\n          {\n            path: 'getCustomer',\n            component: GetCustomerByIdComponent\n          },\n          {\n            path: '',\n            redirectTo: '/allCompanies',\n            pathMatch: 'full'\n          }\n        ]\n    )\n    // SplitButtonModule\n\n\n  ],\n  providers: [WebApiAdminService, MessageService, { provide: LocationStrategy, useClass: HashLocationStrategy } ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".field-icon {\\r\\n  float: right;\\r\\n  margin-left: -25px;\\r\\n  margin-top: -25px;\\r\\n  position: relative;\\r\\n  z-index: 2;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n    <p-fieldset [legend]=\\\"caption\\\">\\n     <p-table [columns]=\\\"cols\\\" [value]=\\\"customers\\\" selectionMode=\\\"single\\\" [paginator]=\\\"true\\\" [(selection)]=\\\"selectedCustomer\\\" (onRowSelect)=\\\"onRowSelect($event)\\\"\\n     [rows]=\\\"20\\\" [resizableColumns]=\\\"true\\\">\\n      <ng-template pTemplate=\\\"caption\\\">\\n          {{ numOfCustomers }} Listed Customers\\n        </ng-template>\\n      <ng-template pTemplate=\\\"header\\\">\\n          <tr>\\n              <th *ngFor=\\\"let col of cols\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn>\\n              {{ col.displayName }}\\n              <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\n              </th>\\n          </tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\n          <tr [pSelectableRow]=\\\"rowData\\\">\\n              <td *ngFor=\\\"let col of columns\\\">\\n                  <div *ngIf=\\\"col.displayName==='Password'\\\">****************</div>\\n                  <div *ngIf=\\\"col.displayName!=='Password'\\\">{{rowData[col.field]}}</div>\\n                </td>\\n          </tr>\\n      </ng-template>\\n      <ng-template pTemplate=\\\"summary\\\" let-rowData>\\n          <div style=\\\"text-align:left\\\">\\n              <button pButton class=\\\"ui-button-rounded\\\" type=\\\"button\\\" pi-times icon=\\\"pi pi-plus\\\" (click)=\\\"showDialogToAdd()\\\" label=\\\"Add\\\"></button>\\n          </div>\\n      </ng-template>\\n    </p-table>\\n    <span>*For update/delete a record please select a row</span>\\n    </p-fieldset>\\n    </div>\\n    <p-dialog id=\\\"customerDialog\\\" header=\\\"Customer Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [width]=\\\"500\\\"\\n[dismissableMask]=\\\"true\\\">\\n <br>\\n    <form [formGroup]=\\\"createCustomerDialogForm\\\">\\n        <div class=\\\"form-group\\\" [class.has-error]=\\\"createCustomerDialogForm.controls['custName'].invalid && createCustomerDialogForm.controls['custName'].touched\\\"\\n        [class.has-success]=\\\"createCustomerDialogForm.controls['custName'].valid && createCustomerDialogForm.controls['custName'].touched\\\">\\n        <span class=\\\"ui-float-label\\\">\\n          <input id=\\\"custName\\\" type=\\\"text\\\" formControlName=\\\"custName\\\" class=\\\"form-control\\\" name=\\\"custName\\\" [(ngModel)]=\\\"customer.custName\\\"\\n           pInputText>\\n          <label for=\\\"custName\\\" class=\\\"control-label\\\">Name</label>\\n        </span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCustomerDialogForm.controls['custName'].invalid && createCustomerDialogForm.controls['custName'].touched\\\">\\n            Name Is Required</span>\\n      </div><br>\\n\\n      <div class=\\\"form-group\\\" [class.has-error]=\\\"createCustomerDialogForm.controls['password'].invalid && createCustomerDialogForm.controls['password'].touched\\\"\\n      [class.has-success]=\\\"createCustomerDialogForm.controls['password'].valid && createCustomerDialogForm.controls['password'].touched\\\">\\n      <span class=\\\"ui-float-label\\\">\\n        <input id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"customer.password\\\"\\n         pInputText>\\n        <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n      </span>\\n      <span id=\\\"hideShowPassword\\\" toggle=\\\"#password\\\" class=\\\"pi pi-pw pi-eye field-icon toggle-password\\\"></span>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"createCustomerDialogForm.controls['password'].invalid && createCustomerDialogForm.controls['password'].touched\\\">\\n          Password Is Required\\n      </span>\\n    </div><br>\\n\\n  <p-footer>\\n      <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix ui-button-icon-left\\\">\\n          <button  type=\\\"button\\\" pButton class=\\\"ui-button-rounded ui-button-danger\\\" icon=\\\"pi pi-times\\\" (click)=\\\"delete()\\\" [label]=\\\"DialogLeftButton\\\"></button>\\n          &nbsp;\\n          <button type=\\\"button\\\" [disabled]=\\\"!createCustomerDialogForm.valid\\\" pButton  class=\\\"ui-button-rounded ui-button-success\\\" icon=\\\"pi pi-save\\\" (click)=\\\"save()\\\" [label]=\\\"DialogRightButton\\\"></button>\\n      </div>\\n  </p-footer>\\n    </form>\\n</p-dialog>\\n\\n\\n\\n\\n    <!-- <p-dialog header=\\\"Customer Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [width]=\\\"300\\\">\\n        <div class=\\\"ui-g ui-fluid\\\" *ngIf=\\\"customer\\\">\\n            <div class=\\\"ui-g-12\\\" *ngFor=\\\"let col of cols\\\">\\n                <div class=\\\"ui-g-4\\\">\\n                    <label for=\\\"{col.field}\\\">{{ col.displayName }}</label>\\n                </div>\\n                <div class=\\\"ui-g-8\\\">\\n                    <input [type]=\\\"col.type\\\" attr.id=\\\"col.field\\\" [(ngModel)]=\\\"customer[col.field]\\\" [disabled]=\\\"col.disabled==='true'\\\"/>\\n                </div>\\n            </div>\\n        </div>\\n        <p-footer>\\n            <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\">\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-times\\\" (click)=\\\"delete()\\\" [label]=\\\"DialogLeftButton\\\"></button>\\n                <button type=\\\"button\\\" pButton icon=\\\"pi pi-save\\\" (click)=\\\"save()\\\" [label]=\\\"DialogRightButton\\\"></button>\\n            </div>\\n        </p-footer>\\n    </p-dialog> -->\\n\\n\"","import { MessageService } from 'primeng/api';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Customer } from '../common/Customer';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport * as $ from 'jquery';\n\n@Component({\n  selector: 'app-admin-area-customer',\n  templateUrl: './admin-area-customer.component.html',\n  styleUrls: ['./admin-area-customer.component.css']\n})\nexport class AdminAreaCustomerComponent implements OnInit {\n\n  customers: Customer[] = [];\n  cols: any[];\n  caption = 'Customer Main Management Area';\n  customer: Customer = new Customer(null, '', '');\n  newCustomer: boolean;\n  displayDialog: boolean;\n  selectedCustomer: Customer;\n  customerName: string;\n  numOfCustomers: number;\n  DialogLeftButton = 'Delete';\n  DialogRightButton = 'Update';\n  createCustomerDialogForm: FormGroup;\n\n\n  /*\n  At the constructor we inject\n  1. FormBuilder for the favor validation of the forms\n  2. WebApiAdminService for the favor of the services\n  3. MessageService for the favor of the custom messages\n  */\n  constructor(private formBuilder: FormBuilder, private adminService: WebApiAdminService, private messageService: MessageService) {\n     this.getAllCustomers();\n     this.cols = adminService.customerCols;\n\n     this.createCustomerDialogForm = formBuilder.group ({\n      'custName': [null, Validators.compose([Validators.required])],\n      'password': [null, Validators.compose([Validators.required])]\n    });\n  }\n\n  // on the ngOnInit a java script function responsible for covering and uncovering the password\n  ngOnInit() {\n    $('#customerDialog').hover(function() {\n      $('.toggle-password').click(function() {\n        $(this).toggleClass('pi-eye pi-eye-slash');\n        const input = $($(this).attr('toggle'));\n        if (input.attr('type') === 'password') {\n          input.attr('type', 'text');\n        } else {\n          input.attr('type', 'password');\n        }\n      });\n    });\n\n   // this.cols = [\n    //   { displayName: 'Id',        field: 'id',        type: 'number'},\n    //   { displayName: 'Name',      field: 'custName' , type: 'text'  },\n    //   { displayName: 'Password',  field: 'password' , type: 'text'  }\n    // ];\n  }\n\n  // When this method is activated a pop up window is opening and a new customer can be added\n  showDialogToAdd() {\n    this.newCustomer = true;\n    this.customer = new Customer(null, '', '');\n    this.displayDialog = true;\n    this.createCustomerDialogForm.reset();\n    this.disabledInputs('Add');\n    this.DialogLeftButton = 'Cancel';\n    this.DialogRightButton = 'Save';\n  }\n\n  // When this method is activated a pop up window is opening and a new customer can be edited\n  onRowSelect(event) {\n    this.newCustomer = false;\n    this.customer = this.cloneCustomer(event.data);\n    this.displayDialog = true;\n    this.disabledInputs('Update');\n    this.DialogLeftButton = 'Delete';\n    this.DialogRightButton = 'Update';\n  }\n\n  // This method is activated from onRowSelect in order to present the edited customer\n  cloneCustomer(cust: Customer): Customer {\n    const tempCust = new Customer(null, '', '');\n    // tslint:disable-next-line:forin\n    for (const prop in cust) {\n      tempCust[prop] = cust[prop];\n    }\n    return tempCust;\n  }\n\n  // This method responsible for enabling and disabling editable inputs\n  private disabledInputs(source: string) {\n    this.createCustomerDialogForm.disable();\n    this.createCustomerDialogForm.get('password').enable();\n    if (source === 'Add') {\n      this.createCustomerDialogForm.enable();\n    }\n  }\n\n  /* This method responsible to save the data in two cases:\n     1. When a new customer being added the addNewCustomerService service is activated\n     2. When an existing customer being edited than the updateCustomerService service is activated\n  */\n  save() {\n    this.customerName = this.customer.custName;\n    if (this.newCustomer) { // Add new company to DB\n      this.adminService.addNewCustomerService(this.customer).subscribe(\n        (resp) => {\n          this.getAllCustomers();\n          this.messageService.add({severity: 'success', summary: 'Customer Was Added', detail: this.customerName +\n          ' Was Added Successfully'});\n        },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Customer Was\\'t Added', detail: error._body});\n        });\n    } else { // Update the company\n      this.adminService.updateCustomerService(this.customer).subscribe(\n        () => {\n          this.getAllCustomers();\n          this.messageService.add({severity: 'success', summary: 'Customer Was Updated', detail: this.customerName +\n          ' Was Updated Successfully'});\n        },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Customer Was\\'t Updated', detail: error._body});\n        });\n    }\n    // this.customer = null;\n    this.displayDialog = false;\n  }\n\n  // When a customer is deleted than this method is activated and it activate the deleteCustomerService service\n   delete() {\n    this.customerName = this.customer.custName;\n    if (!this.newCustomer) {\n    this.adminService.deleteCustomerService(this.selectedCustomer).subscribe(\n         () => {\n           this.getAllCustomers();\n            this.messageService.add({severity: 'success', summary: 'Customer Was Deleted', detail: this.customerName +\n            ' Was Deleted Successfully'});\n        },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Customer Was\\'t Deleted', detail: error._body});\n        });\n    }\n     // this.customer = null;\n     this.displayDialog = false;\n   }\n\n  // This method is activated from the constructor - in order to intialize the data for the first time\n  getAllCustomers() {\n    this.adminService.getAllCustomersService().subscribe(\n      (resp) => {\n        this.customers = resp.json();\n        this.numOfCustomers = this.customers.length;\n        // Make default sort of companies array\n        this.sortArry(this.customers);\n    },\n    (error) => {\n      this.customers = [];\n      this.messageService.add({severity: 'error', summary: 'Data Unavailable', detail: error._body});\n    });\n  }\n\n  // This function responsible to sort the array accoring to the customer name\n  private sortArry(arryToSort: Customer[]) {\n    arryToSort.sort((a: any, b: any) => {\n      if (a.custName < b.custName) {\n        return -1;\n      } else if (a.custName > b.custName) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n","module.exports = \".field-icon {\\r\\n  float: right;\\r\\n  margin-left: -25px;\\r\\n  margin-top: -25px;\\r\\n  position: relative;\\r\\n  z-index: 2;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n<p-fieldset [legend]=\\\"caption\\\">\\n <p-table [columns]=\\\"cols\\\" [value]=\\\"companies\\\" selectionMode=\\\"single\\\" [paginator]=\\\"true\\\" [(selection)]=\\\"selectedCompany\\\" (onRowSelect)=\\\"onRowSelect($event)\\\"\\n [rows]=\\\"20\\\" [resizableColumns]=\\\"true\\\">\\n <ng-template pTemplate=\\\"caption\\\">\\n  {{ numOfCompanies }} Listed Companies\\n  </ng-template>\\n  <ng-template pTemplate=\\\"header\\\">\\n      <tr>\\n          <th *ngFor=\\\"let col of cols\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn>\\n          {{ col.displayName }}\\n          <p-sortIcon [field]=\\\"col.field\\\"></p-sortIcon>\\n          </th>\\n      </tr>\\n  </ng-template>\\n  <ng-template pTemplate=\\\"body\\\" let-rowData let-columns=\\\"columns\\\">\\n      <tr [pSelectableRow]=\\\"rowData\\\">\\n          <td *ngFor=\\\"let col of columns\\\">\\n            <div *ngIf=\\\"col.displayName==='Password'\\\">****************</div>\\n            <div *ngIf=\\\"col.displayName!=='Password'\\\">{{rowData[col.field]}}</div>\\n          </td>\\n      </tr>\\n  </ng-template>\\n  <ng-template pTemplate=\\\"summary\\\" let-rowData>\\n      <div style=\\\"text-align:left\\\">\\n          <button pButton class=\\\"ui-button-rounded\\\" type=\\\"button\\\"  icon=\\\"pi pi-plus\\\" (click)=\\\"showDialogToAdd()\\\" label=\\\"Add\\\"></button>\\n      </div>\\n  </ng-template>\\n</p-table>\\n<span>*For update/delete a record please select a row</span>\\n</p-fieldset>\\n</div>\\n<p-dialog id=\\\"compnayDialog\\\" header=\\\"Company Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [width]=\\\"500\\\"\\n[dismissableMask]=\\\"true\\\">\\n <br>\\n    <form [formGroup]=\\\"createCompanyDialogForm\\\">\\n        <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyDialogForm.controls['compName'].invalid && createCompanyDialogForm.controls['compName'].touched\\\"\\n        [class.has-success]=\\\"createCompanyDialogForm.controls['compName'].valid && createCompanyDialogForm.controls['compName'].touched\\\">\\n        <span class=\\\"ui-float-label\\\">\\n          <input id=\\\"compName\\\" type=\\\"text\\\" formControlName=\\\"compName\\\" class=\\\"form-control\\\" name=\\\"compName\\\" [(ngModel)]=\\\"company.compName\\\"\\n           pInputText>\\n          <label for=\\\"compName\\\" class=\\\"control-label\\\">Name</label>\\n        </span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyDialogForm.controls['compName'].invalid && createCompanyDialogForm.controls['compName'].touched\\\">\\n            Name Is Required</span>\\n      </div><br>\\n\\n      <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyDialogForm.controls['password'].invalid && createCompanyDialogForm.controls['password'].touched\\\"\\n      [class.has-success]=\\\"createCompanyDialogForm.controls['password'].valid && createCompanyDialogForm.controls['password'].touched\\\">\\n      <span class=\\\"ui-float-label\\\">\\n        <input id=\\\"password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"company.password\\\"\\n        pPassword>\\n        <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n      </span>\\n      <span toggle=\\\"#password\\\" class=\\\"pi pi-pw pi-eye field-icon toggle-password\\\"></span>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyDialogForm.controls['password'].invalid && createCompanyDialogForm.controls['password'].touched\\\">\\n          Password Is Required\\n        </span>\\n    </div><br>\\n\\n    <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyDialogForm.controls['email'].invalid && createCompanyDialogForm.controls['email'].touched\\\"\\n    [class.has-success]=\\\"createCompanyDialogForm.controls['email'].valid && createCompanyDialogForm.controls['email'].touched\\\">\\n    <span class=\\\"ui-float-label\\\">\\n      <input id=\\\"email\\\" type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"company.email\\\"\\n       pInputText>\\n      <label for=\\\"email\\\" class=\\\"control-label\\\">Email</label>\\n    </span>\\n    <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyDialogForm.controls['email'].invalid && createCompanyDialogForm.controls['email'].touched\\\">\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyDialogForm.get('email').errors['required']\\\">\\n        Email Is Required\\n    </span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyDialogForm.get('email').errors['email']\\\">\\n            Please Enter A vaild Email\\n        </span>\\n      </span>\\n  </div><br>\\n  <p-footer>\\n      <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix ui-button-icon-left\\\">\\n          <button  type=\\\"button\\\" pButton class=\\\"ui-button-rounded ui-button-danger\\\" icon=\\\"pi pi-times\\\" (click)=\\\"delete()\\\" [label]=\\\"DialogLeftButton\\\"></button>\\n          &nbsp;\\n          <button type=\\\"button\\\" [disabled]=\\\"!createCompanyDialogForm.valid\\\" pButton  class=\\\"ui-button-rounded ui-button-success\\\" icon=\\\"pi pi-save\\\" (click)=\\\"save()\\\" [label]=\\\"DialogRightButton\\\"></button>\\n      </div>\\n  </p-footer>\\n    </form>\\n</p-dialog>\\n\\n<!-- <p-dialog header=\\\"Company Details\\\" [(visible)]=\\\"displayDialog\\\" [responsive]=\\\"true\\\" showEffect=\\\"fade\\\" [modal]=\\\"true\\\" [width]=\\\"300\\\">\\n    <div class=\\\"ui-g ui-fluid\\\" *ngIf=\\\"company\\\">\\n        <div class=\\\"ui-g-12\\\" *ngFor=\\\"let col of cols\\\">\\n            <div class=\\\"ui-g-4\\\">\\n                <label for=\\\"{col.field}\\\">{{ col.displayName }}</label>\\n            </div>\\n            <div class=\\\"ui-g-8\\\">\\n                <input [type]=\\\"col.type\\\" attr.id=\\\"col.field\\\" [(ngModel)]=\\\"company[col.field]\\\" required [disabled]=\\\"col.disabled==='true'\\\"/>\\n            </div>\\n        </div>\\n    </div>\\n    <p-footer>\\n        <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\">\\n            <button type=\\\"button\\\" pButton icon=\\\"pi pi-times\\\" (click)=\\\"delete()\\\" [label]=\\\"DialogLeftButton\\\"></button>\\n            <button type=\\\"button\\\" pButton icon=\\\"pi pi-save\\\" (click)=\\\"save()\\\" [label]=\\\"DialogRightButton\\\"></button>\\n        </div>\\n    </p-footer>\\n</p-dialog> -->\\n\\n\"","import { MessageService} from 'primeng/api';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Company } from '../common/Company';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport * as $ from 'jquery';\n\n@Component({\n  selector: 'app-admin-area',\n  templateUrl: './admin-area.component.html',\n  styleUrls: ['./admin-area.component.css']\n})\nexport class AdminAreaComponent implements OnInit {\n\n\n  // Define variables\n  companies: Company[] = [];\n  cols: any[];\n  caption = 'Company Main Management Area';\n  company: Company = new Company(null, '', '', '');\n  newCompany: boolean;\n  displayDialog: boolean;\n  selectedCompany: Company;\n  companyName: string;\n  numOfCompanies: number;\n  DialogLeftButton = 'Delete';\n  DialogRightButton = 'Update';\n  createCompanyDialogForm: FormGroup;\n  // emailPattern = '^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$';\n\n  /*\n  At the constructor we inject\n  1. FormBuilder for the favor validation of the forms\n  2. WebApiAdminService for the favor of the services\n  3. MessageService for the favor of the custom messages\n  */\n  constructor(private formBuilder: FormBuilder, private adminService: WebApiAdminService, private messageService: MessageService) {\n    this.getAllCompanies();\n    this.cols = adminService.companyCols;\n\n    this.createCompanyDialogForm = formBuilder.group ({\n      'compName': [null, Validators.compose([Validators.required])],\n      'password': [null, Validators.compose([Validators.required])],\n      'email': [null, Validators.compose([Validators.required, Validators.email])]\n    });\n\n  }\n\n  // on the ngOnInit a java script function responsible for covering and uncovering the password\n  ngOnInit() {\n    $('#compnayDialog').hover(function() {\n      $('.toggle-password').click(function() {\n        const input = $($(this).attr('toggle'));\n        $(this).toggleClass('pi-eye pi-eye-slash');\n        if (input.attr('type') === 'password') {\n          input.attr('type', 'text');\n        } else {\n          input.attr('type', 'password');\n        }\n      });\n    });\n\n    // this.cols = [\n    //   { displayName: 'Id',        field: 'id',        type: 'number' },\n    //   { displayName: 'Name',      field: 'compName' , type: 'text'   },\n    //   { displayName: 'Password',  field: 'password' , type: 'text'   },\n    //   { displayName: 'Email',     field: 'email',     type: 'email'  },\n    // ];\n  }\n\n  // When this method is activated a pop up window is opening and a new company can be added\n  showDialogToAdd() {\n    this.newCompany = true;\n    this.company = new Company(null, '', '', '');\n    this.displayDialog = true;\n    this.createCompanyDialogForm.reset();\n    this.disabledInputs('Add');\n    this.DialogLeftButton = 'Cancel';\n    this.DialogRightButton = 'Save';\n\n    // const elem = $('#compnayDialog').find('.toggle-password');\n    // elem.click(function() {\n    //   $(this).removeClass ('pi-eye-slash');\n    //   $(this).addClass ('pi-eye');\n    //   $($(this).attr('toggle')).attr('type', 'password');\n    // });\n  }\n\n  // When this method is activated a pop up window is opening and a new company can be edited\n  onRowSelect(event) {\n    this.newCompany = false;\n    // this.createCompanyDialogForm.reset();\n    this.company = this.cloneCompany(event.data);\n    this.displayDialog = true;\n    this.disabledInputs('Update');\n    this.DialogLeftButton = 'Delete';\n    this.DialogRightButton = 'Update';\n  }\n\n\n  // This method is activated from onRowSelect in order to present the edited company\n  cloneCompany(comp: Company): Company {\n    const tempComp = new Company(null, '', '', '');\n    // tslint:disable-next-line:forin\n    for (const prop in comp) {\n      tempComp[prop] = comp[prop];\n    }\n    return tempComp;\n  }\n\n  // This method responsible for enabling and disabling editable inputs\n  private disabledInputs(source: string) {\n    this.createCompanyDialogForm.disable();\n    this.createCompanyDialogForm.get('password').enable();\n    this.createCompanyDialogForm.get('email').enable();\n    if (source === 'Add') {\n      this.createCompanyDialogForm.enable();\n    }\n  }\n\n  /* This method responsible to save the data in two cases:\n     1. When a new company being added the ddNewCompanyService service is activated\n     2. When an existing company being edited than the updateCompanyService service is activated\n  */\n  save() {\n    this.companyName = this.company.compName;\n    if (this.newCompany) { // Add new company to DB\n      this.adminService.addNewCompanyService(this.company).subscribe(\n        (resp) => {\n          this.getAllCompanies();\n          this.messageService.add({severity: 'success', summary: 'Company Was Added', detail: this.companyName +\n          ' Was Added Successfully'});\n        },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Company Was\\'t Added', detail: error._body});\n        });\n    } else { // Update the company\n      this.adminService.updateCompanyService(this.company).subscribe(\n        (resp) => {\n          this.getAllCompanies();\n          this.messageService.add({severity: 'success', summary: 'Company Was Updated', detail: this.companyName +\n          ' Was Updated Successfully'});\n        },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Company Was\\'t Updated', detail: error._body});\n        });\n    }\n    // this.company = null;\n    this.displayDialog = false;\n  }\n\n  // When a company is deleted than this method is activated and it activate the deleteCompanyService service\n   delete() {\n    this.companyName = this.company.compName;\n    if (!this.newCompany) {\n    this.adminService.deleteCompanyService(this.selectedCompany).subscribe(\n      (resp) => {\n        this.getAllCompanies();\n        this.messageService.add({severity: 'success', summary: 'Company Was Deleted', detail: this.companyName +\n        ' Was Deleted Successfully'});\n      },\n      (error) => {\n        this.messageService.add({severity: 'error', summary: 'Company Was\\'t Deleted', detail: error._body});\n      });\n    }\n     // this.company = null;\n     this.displayDialog = false;\n   }\n\n   // This method is activated from the constructor - in order to intialize the data for the first time\n  getAllCompanies() {\n    this.adminService.getAllCompaniesService().subscribe(\n      (resp) => {\n        this.companies = resp.json();\n        this.numOfCompanies = this.companies.length;\n        // Make default sort of companies array\n        this.sortArry(this.companies);\n      },\n      (error) => {\n        this.companies = [];\n        this.messageService.add({severity: 'error', summary: 'Data Unavailable', detail: error._body});\n      });\n  }\n\n  // This function responsible to sort the array accoring to the company name\n  private sortArry(arryToSort: Company[]) {\n    arryToSort.sort((a: any, b: any) => {\n      if (a.compName < b.compName) {\n        return -1;\n      } else if (a.compName > b.compName) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n","import { Coupon } from './Coupon';\r\n\r\nexport class Company {\r\n\r\n  constructor(public id: number, public compName: string, public email: string, public password: string, public coupons?: Coupon[]) {}\r\n\r\n}\r\n","import { Coupon } from './Coupon';\r\n\r\nexport class Customer {\r\n\r\n  constructor(public id: number, public custName: string, public password: string, public coupons?: Coupon[]) {}\r\n\r\n}\r\n","module.exports = \"button {\\r\\n  margin-top: 10px;\\r\\n  background: transparent;\\r\\n}\\r\\n\\r\\n.navbar-brand {\\r\\n  position: absolute;\\r\\n  width: 100%;\\r\\n  left: 0;\\r\\n  top: 0;\\r\\n  text-align: center;\\r\\n  margin: auto;\\r\\n}\\r\\n\"","module.exports = \"<nav class=\\\"navbar navbar-inverse navbar-fixed-top\\\" role=\\\"navigation\\\">\\n    <div class=\\\"container-fluid\\\">\\n\\t    <div class=\\\"navbar-header\\\">\\n      <div class=\\\"navbar-brand\\\">CouponSystem</div>\\n    </div>\\n        <div id=\\\"navbar\\\" class=\\\"navbar-collapse collapse\\\">\\n            <ul class=\\\"nav navbar-nav navbar-left\\\">\\n                <li>\\n                    <!-- <p-menu #menu [popup]=\\\"true\\\" [model]=\\\"items\\\"></p-menu> -->\\n                    <p-menu [showTransitionOptions]=\\\"'0ms'\\\" [hideTransitionOptions]=\\\"'0ms'\\\" #menu [popup]=\\\"true\\\" [model]=\\\"items\\\"></p-menu>\\n                    <a class=\\\"glyphicon glyphicon-list\\\"  label=\\\"Show\\\" (click)=\\\"menu.toggle($event)\\\"></a>\\n                </li>\\n            </ul>\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                <li><a><span class=\\\"glyphicon glyphicon-user\\\"></span> Hello Admin</a></li>\\n                <li><a (click)=\\\"logout()\\\"><span class=\\\"glyphicon glyphicon-off\\\"></span>Log Out</a></li>\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\\n\"","// import { MenuItem } from 'primeng/primeng';\nimport { Component, OnInit } from '@angular/core';\nimport { MenuItem, MessageService } from 'primeng/primeng';\nimport { WebApiAdminService } from './../../../services/web-api-admin.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  items: MenuItem[];\n  request: Request;\n  response: Response;\n  prefixLogOutUrl: string;\n\n  constructor(private adminService: WebApiAdminService, private messageService: MessageService) {\n    this.prefixLogOutUrl = adminService.prefixLogOutUrl;\n  }\n\n  ngOnInit() {\n    this.items = [\n    {\n      label: 'Company',\n      items: [\n          {label: 'Manage Area', icon: 'pi pi-fw pi-file', routerLink: '/allCompanies'},\n          {label: 'Company {Id}', icon: 'pi pi-fw pi-file', routerLink: '/getCompany'},\n          {label: 'Add {Single}', icon: 'pi pi-fw pi-plus', routerLink: '/addCompany'},\n          // {label: 'Delete/Update', icon: 'pi pi-fw pi-trash', routerLink: '/allCompanies'}\n      ]\n  },\n  {\n        label: 'Customer',\n        items: [\n          {label: 'Manage Area', icon: 'pi pi-fw pi-file', routerLink: '/allCustomers'},\n          {label: 'Customer {Id}', icon: 'pi pi-fw pi-file', routerLink: '/getCustomer'},\n          {label: 'Add {Single}', icon: 'pi pi-fw pi-plus', routerLink: '/addCustomer'}\n        ]\n      }\n    ];\n  }\n\n  public logout() {\n    this.adminService.logOutService(this.request, this.response).subscribe(\n      (resp) => {\n        this.messageService.add({severity: 'success', summary: 'LogOut', detail: 'You Were Logged Out Successfully'});\n        window.location.href = this.prefixLogOutUrl;\n      },\n      (error) => {\n        this.messageService.add({severity: 'success', summary: 'LogOut', detail: 'Logged Out Failed'});\n      });\n  }\n\n}\n","module.exports = \"<p-toast position=\\\"center\\\" key=\\\"c\\\" (onClose)=\\\"onReject()\\\" [modal]=\\\"true\\\" [baseZIndex]=\\\"5000\\\">\\n  <ng-template let-message pTemplate=\\\"message\\\">\\n      <div style=\\\"text-align: center\\\">\\n          <i class=\\\"pi pi-exclamation-triangle\\\" style=\\\"font-size: 3em\\\"></i>\\n          <h3>{{message.summary}}</h3>\\n          <p>{{message.detail}}</p>\\n      </div>\\n      <div class=\\\"ui-g ui-fluid\\\">\\n          <div class=\\\"ui-g-6\\\">\\n              <button type=\\\"button\\\" pButton (click)=\\\"onConfirm()\\\" label=\\\"Yes\\\" class=\\\"ui-button-success\\\"></button>\\n          </div>\\n          <div class=\\\"ui-g-6\\\">\\n              <button type=\\\"button\\\" pButton (click)=\\\"onReject()\\\" label=\\\"No\\\" class=\\\"ui-button-secondary\\\"></button>\\n          </div>\\n      </div>\\n  </ng-template>\\n</p-toast>\\n\"","import { Component } from '@angular/core';\nimport { MessageService, Message } from 'primeng/api';\n\n@Component({\n  templateUrl: './messages.component.html'\n})\nexport class MessagesComponent {\n\n  messages: Message[];\n\n  constructor(private messageService: MessageService) {}\n\n  onConfirm() {\n    this.messageService.clear('c');\n  }\n\n  onReject() {\n    this.messageService.clear('c');\n  }\n\n  clear() {\n    this.messageService.clear();\n  }\n}\n","module.exports = \".field-icon {\\r\\n  float: right;\\r\\n  margin-left: -25px;\\r\\n  margin-top: -25px;\\r\\n  position: relative;\\r\\n  z-index: 2;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n<p-fieldset [legend]=\\\"caption\\\">\\n    <form [formGroup]=\\\"createCompanyForm\\\">\\n        <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyForm.controls['compName'].invalid && createCompanyForm.controls['compName'].touched\\\"\\n        [class.has-success]=\\\"createCompanyForm.controls['compName'].valid && createCompanyForm.controls['compName'].touched\\\">\\n      <span class=\\\"ui-float-label\\\">\\n          <input id=\\\"compName\\\" type=\\\"text\\\" formControlName=\\\"compName\\\" class=\\\"form-control\\\" name=\\\"compName\\\" [(ngModel)]=\\\"newCompany.compName\\\"\\n           pInputText>\\n          <label for=\\\"compName\\\" class=\\\"control-label\\\">Name</label>\\n        </span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyForm.controls['compName'].invalid && createCompanyForm.controls['compName'].touched\\\">\\n            Name Is Required</span>\\n      </div><br>\\n      <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyForm.controls['password'].invalid && createCompanyForm.controls['password'].touched\\\"\\n      [class.has-success]=\\\"createCompanyForm.controls['password'].valid && createCompanyForm.controls['password'].touched\\\">\\n        <span class=\\\"ui-float-label\\\">\\n            <input id=\\\"password\\\"  type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"newCompany.password\\\" pPassword>\\n            <label for=\\\"password\\\" class=\\\"control-label\\\">Password</label>\\n        </span>\\n        <span toggle=\\\"#password\\\" class=\\\"pi pi-pw pi-eye field-icon toggle-password\\\"></span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyForm.controls['password'].invalid && createCompanyForm.controls['password'].touched\\\">\\n            Password Is Required\\n          </span>\\n    </div><br>\\n    <div class=\\\"form-group\\\" [class.has-error]=\\\"createCompanyForm.controls['email'].invalid && createCompanyForm.controls['email'].touched\\\"\\n    [class.has-success]=\\\"createCompanyForm.controls['email'].valid && createCompanyForm.controls['email'].touched\\\">\\n      <span class=\\\"ui-float-label\\\">\\n          <input id=\\\"email\\\" type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"newCompany.email\\\" >\\n          <label for=\\\"email\\\" class=\\\"control-label\\\">Email</label>\\n      </span>\\n      <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyForm.controls['email'].invalid && createCompanyForm.controls['email'].touched\\\">\\n          <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyForm.get('email').errors['required']\\\">\\n          Email Is Required\\n      </span>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"createCompanyForm.get('email').errors['email']\\\">\\n              Please Enter A vaild Email\\n          </span>\\n        </span>\\n    </div>\\n    <button pButton  [disabled]=\\\"!newCompany.compName\\\"  type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Add Company\\\" (click)=\\\"addNewCompany()\\\"></button>\\n  </form>\\n  </p-fieldset>\\n</div>\\n\"","import { MessageService } from 'primeng/api';\nimport { Company } from './../common/Company';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport * as $ from 'jquery';\n\n\n@Component({\n  selector: 'app-create-company',\n  templateUrl: './create-company.component.html',\n  styleUrls: ['./create-company.component.css']\n})\nexport class CreateCompanyComponent implements OnInit {\n\n  newCompany: Company = new Company(null, '', '', '');\n  caption = 'Create A New Company';\n  createCompanyForm: FormGroup;\n  cols: any[];\n\n\n    /*\n  At the constructor we inject\n  1. FormBuilder for the favor validation of the forms\n  2. WebApiAdminService for the favor of the services\n  3. MessageService for the favor of the custom messages\n  */\n  constructor(private formBuilder: FormBuilder, private adminService: WebApiAdminService, private messageService: MessageService) {\n     this.cols = adminService.companyCols;\n     this.createCompanyForm = formBuilder.group ({\n      'compName': [null, Validators.compose([Validators.required])],\n      'password': [null, Validators.compose([Validators.required])],\n      'email': [null, Validators.compose([Validators.required, Validators.email])]\n    });\n  }\n\n  // This method is activated when a new company being added.\n  // it gets the all the information from the form and sent it as a company object into the addNewCompanyService service\n  public addNewCompany() {\n    this.adminService.addNewCompanyService(this.newCompany).subscribe\n    (\n      (resp) => {\n        this.messageService.add({severity: 'success', summary: 'Company Was Added', detail: this.newCompany.compName +\n         ' Was Added Successfully'});\n      },\n      (error) => {\n         this.messageService.add({severity: 'error', summary: 'Company Was\\'t Added', detail: error._body});\n      });\n      this.newCompany = new Company(null, '', '', '');\n      // this.messageService.clear();\n  }\n\n  // on the ngOnInit a java script function responsible for covering and uncovering the password\n  ngOnInit() {\n    $('.toggle-password').click(function() {\n      $(this).toggleClass('pi-eye pi-eye-slash');\n      const input = $($(this).attr('toggle'));\n      if (input.attr('type') === 'password') {\n        input.attr('type', 'text');\n      } else {\n        input.attr('type', 'password');\n      }\n    });\n  }\n\n}\n","module.exports = \".field-icon {\\r\\n  float: right;\\r\\n  margin-left: -25px;\\r\\n  margin-top: -25px;\\r\\n  position: relative;\\r\\n  z-index: 2;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <p-fieldset [legend]=\\\"caption\\\">\\n      <form [formGroup]=\\\"createCustomerForm\\\">\\n          <div class=\\\"form-group\\\" [class.has-error]=\\\"createCustomerForm.controls['custName'].invalid && createCustomerForm.controls['custName'].touched\\\"\\n          [class.has-success]=\\\"createCustomerForm.controls['custName'].valid && createCustomerForm.controls['custName'].touched\\\">\\n        <span class=\\\"ui-float-label\\\">\\n            <input id=\\\"compName\\\" type=\\\"text\\\" formControlName=\\\"custName\\\" class=\\\"form-control\\\" name=\\\"compName\\\" [(ngModel)]=\\\"newCustomer.custName\\\" pInputText>\\n            <label for=\\\"compName\\\">Name</label>\\n        </span>\\n        <span class=\\\"help-block\\\" *ngIf=\\\"createCustomerForm.controls['custName'].invalid && createCustomerForm.controls['custName'].touched\\\">\\n            Name Is Required</span>\\n      </div><br>\\n      <div class=\\\"form-group\\\" [class.has-error]=\\\"createCustomerForm.controls['password'].invalid && createCustomerForm.controls['password'].touched\\\"\\n      [class.has-success]=\\\"createCustomerForm.controls['password'].valid && createCustomerForm.controls['password'].touched\\\">\\n          <span class=\\\"ui-float-label\\\">\\n              <input id=\\\"password\\\"  type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"newCustomer.password\\\" pPassword>\\n              <label for=\\\"password\\\">Password</label>\\n          </span>\\n          <span toggle=\\\"#password\\\" class=\\\"pi pi-pw pi-eye field-icon toggle-password\\\"></span>\\n          <span class=\\\"help-block\\\" *ngIf=\\\"createCustomerForm.controls['password'].invalid && createCustomerForm.controls['password'].touched\\\">\\n              Password Is Required</span>\\n      </div><br>\\n      <!-- <button pButton  [disabled]=\\\"!newCustomer.custName\\\"  type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Add Customer\\\" (click)=\\\"addNewCustomer(); AddCustForm.reset()\\\"></button> -->\\n      <button pButton  [disabled]=\\\"!newCustomer.custName\\\"  type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Add Customer\\\" (click)=\\\"addNewCustomer()\\\"></button>\\n    </form>\\n    </p-fieldset>\\n  </div>\\n\"","import { MessageService } from 'primeng/api';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Customer } from './../common/Customer';\nimport { Component, OnInit , ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport * as $ from 'jquery';\n\n@Component({\n  selector: 'app-create-customer',\n  templateUrl: './create-customer.component.html',\n  styleUrls: ['./create-customer.component.css']\n})\nexport class CreateCustomerComponent implements OnInit {\n\n  @ViewChild('AddCustForm') AddCustForm;\n  newCustomer: Customer = new Customer(null, '', '');\n  caption = 'Create A New Customer';\n  createCustomerForm: FormGroup;\n  cols: any[];\n\n  /*\n  At the constructor we inject\n  1. FormBuilder for the favor validation of the forms\n  2. WebApiAdminService for the favor of the services\n  3. MessageService for the favor of the custom messages\n  */\n  constructor(private formBuilder: FormBuilder, private adminService: WebApiAdminService, private messageService: MessageService) {\n    this.cols = adminService.customerCols;\n\n    this.createCustomerForm = formBuilder.group ({\n      'custName': [null, Validators.compose([Validators.required])],\n      'password': [null, Validators.compose([Validators.required])]\n    });\n\n  }\n\n  // This method is activated when a new customer being added.\n  // it gets the all the information from the form and sent it as a customer object into the addNewCustomerService service\n  public addNewCustomer() {\n    this.adminService.addNewCustomerService(this.newCustomer).subscribe\n    (\n      (resp) => {\n        this.messageService.add({severity: 'success', summary: 'Customer Was Added', detail: this.newCustomer.custName +\n         ' Was Added Successfully'});\n      },\n      (error) => {\n         this.messageService.add({severity: 'error', summary: 'Customer Was\\'t Added', detail: error._body});\n      });\n      this.newCustomer = new Customer(null, '', '');\n  }\n\n\n  // on the ngOnInit a java script function responsible for covering and uncovering the password\n  ngOnInit() {\n    $('.toggle-password').click(function() {\n      $(this).toggleClass('pi-eye pi-eye-slash');\n      const input = $($(this).attr('toggle'));\n      if (input.attr('type') === 'password') {\n        input.attr('type', 'text');\n      } else {\n        input.attr('type', 'password');\n      }\n    });\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"\\n\\n\"","import { MessageService } from 'primeng/api';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Company } from '../common/Company';\nimport { SelectItem } from 'primeng/components/common/selectitem';\n\n@Component({\n  selector: 'app-get-all-companies',\n  templateUrl: './get-all-companies.component.html',\n  styleUrls: ['./get-all-companies.component.css']\n})\nexport class GetAllCompaniesComponent implements OnInit {\n\n  companies: Company[];\n  selectedCompany: Company;\n  displayDialog: boolean;\n  sortOptions: SelectItem[];\n  sortKey: string;\n  sortField: string;\n  sortOrder: number;\n  value: string;\n\n  /*\n  At the constructor we inject\n  1. WebApiAdminService for the favor of the services\n  2. MessageService for the favor of the custom messages\n  */\n  constructor(private webApiAdminService: WebApiAdminService, private messageService: MessageService) {}\n\n  ngOnInit() {\n    this.getCompanies();\n  }\n\n  getCompanies() {\n    this.webApiAdminService.getAllCompaniesService().subscribe(\n      (resp) => {\n        this.companies = resp.json();\n      },\n        (error) => {\n          this.messageService.add({severity: 'error', summary: 'Data Unavailable', detail: error._body});\n      });\n  }\n\n  deleteCompany(company: Company) {\n      this.webApiAdminService.deleteCompanyService(company).subscribe(\n          () => {}\n      );\n      this.getCompanies();\n  }\n\n  selectCompany(event: Event, company: Company) {\n    this.selectedCompany = company;\n    this.displayDialog = true;\n    event.preventDefault();\n  }\n\n  onSortChange(event) {\n     this.value = event.value;\n    if (this.value.indexOf('!') === 0) {\n        this.sortOrder = -1;\n        this.sortField = this.value.substring(1, this.value.length);\n    } else {\n        this.sortOrder = 1;\n        this.sortField = this.value;\n    }\n  }\n\n  onDialogHide() {\n    this.selectedCompany = null;\n  }\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <p-fieldset [legend]=\\\"caption\\\">\\n    <form>\\n       <div class=\\\"form-group\\\">\\n            <span class=\\\"ui-float-label\\\">\\n                <input id=\\\"\\\"  type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"id\\\" [(ngModel)]=\\\"requestedCompany.id\\\" pInputText>\\n                <label for=\\\"id\\\">Company Id</label>\\n            </span>\\n        </div><br>\\n        <div class=\\\"form-group\\\">\\n            <span class=\\\"ui-float-label\\\">\\n                <input id=\\\"compName\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"compName\\\" [(ngModel)]=\\\"requestedCompany.compName\\\" disabled=\\\"true\\\"  pInputText>\\n                <label for=\\\"compName\\\">Name</label>\\n            </span>\\n        </div><br>\\n        <div class=\\\"form-group\\\">\\n            <span class=\\\"ui-float-label\\\">\\n                <input id=\\\"password\\\"  type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"requestedCompany.password\\\" disabled=\\\"true\\\" pPassword>\\n                <label for=\\\"password\\\">Password</label>\\n            </span>\\n        </div><br>\\n        <div class=\\\"form-group\\\">\\n          <span class=\\\"ui-float-label\\\">\\n              <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"requestedCompany.email\\\" disabled=\\\"true\\\" pInputText>\\n              <label for=\\\"email\\\">Email</label>\\n          </span>\\n        </div>\\n      <span ><button [disabled]=\\\"!requestedCompany.id\\\" pButton type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Show\\\" (click)=\\\"getCompany(requestedCompany.id)\\\"></button></span>\\n    </form>\\n    </p-fieldset>\\n  </div>\\n\"","import { MessageService } from 'primeng/api';\nimport { Company } from './../common/Company';\nimport { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-get-company-by-id',\n  templateUrl: './get-company-by-id.component.html',\n  styleUrls: ['./get-company-by-id.component.css']\n})\nexport class GetCompanyByIdComponent implements OnInit {\n\n  requestedCompany: Company = new Company(null, '', '', '');\n  inputs: any[];\n  caption = 'Company Information';\n\n  /*\n  At the constructor we inject\n  1. WebApiAdminService for the favor of the services\n  2. MessageService for the favor of the custom messages\n  */\n  constructor(private adminService: WebApiAdminService, private messageService: MessageService) {\n    this.inputs = adminService.companyCols;\n\n  }\n\n  // This methos activate getCompanyByIdService and return the infromation from the DB into requestedCompany variable\n  public getCompany() {\n    this.adminService.getCompanyByIdService(this.requestedCompany.id).subscribe(\n      (resp) => {\n        this.requestedCompany = resp.json();\n      },\n      (error) => {\n        this.messageService.add({severity: 'error', summary: 'Data Unavailable', detail: error._body});\n      });\n  }\n\n  ngOnInit() {\n  //   this.inputs = [\n  //     { displayName: 'Id', field: 'id', type: 'number' , disabled: 'false' },\n  //     { displayName: 'Company Name', field: 'compName' , type: 'text' , disabled: 'true'},\n  //     { displayName: 'Password', field: 'password' , type: 'text', disabled: 'true'},\n  //     { displayName: 'Email', field: 'email', type: 'email', disabled: 'true' },\n  //   ];\n  // }\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <p-fieldset [legend]=\\\"caption\\\">\\n  <form>\\n     <div class=\\\"form-group\\\">\\n          <span class=\\\"ui-float-label\\\">\\n              <input id=\\\"\\\"  type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"id\\\" [(ngModel)]=\\\"requestedCustomer.id\\\" pInputText>\\n              <label for=\\\"id\\\">Company Id</label>\\n          </span>\\n      </div><br>\\n      <div class=\\\"form-group\\\">\\n          <span class=\\\"ui-float-label\\\">\\n              <input id=\\\"compName\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"compName\\\" [(ngModel)]=\\\"requestedCustomer.custName\\\" disabled=\\\"true\\\"  pInputText>\\n              <label for=\\\"compName\\\">Name</label>\\n          </span>\\n      </div><br>\\n      <div class=\\\"form-group\\\">\\n          <span class=\\\"ui-float-label\\\">\\n              <input id=\\\"password\\\"  type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"requestedCustomer.password\\\" disabled=\\\"true\\\" pPassword>\\n              <label for=\\\"password\\\">Password</label>\\n          </span>\\n      </div>\\n      <br>\\n    <span ><button [disabled]=\\\"!requestedCustomer.id\\\" pButton type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Show\\\" (click)=\\\"getCustomer(requestedCustomer.id)\\\"></button></span>\\n    <!-- <span *ngIf=\\\"true\\\"><button pButton type=\\\"submit\\\" class=\\\"ui-button-rounded\\\" label=\\\"Update\\\" (click)=\\\"getCompany(requestedCompany.id)\\\"></button></span> -->\\n  </form>\\n  </p-fieldset>\\n</div>\\n\"","import { WebApiAdminService } from './../../services/web-api-admin.service';\nimport { Customer } from './../common/Customer';\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from 'primeng/api';\n\n@Component({\n  selector: 'app-get-customer-by-id',\n  templateUrl: './get-customer-by-id.component.html',\n  styleUrls: ['./get-customer-by-id.component.css']\n})\nexport class GetCustomerByIdComponent implements OnInit {\n\n  requestedCustomer: Customer = new Customer(null, '', '');\n  inputs: any[];\n  caption = 'Customer Information';\n\n  /*\n  At the constructor we inject\n  1. WebApiAdminService for the favor of the services\n  2. MessageService for the favor of the custom messages\n  */\n  constructor(private adminService: WebApiAdminService, private messageService: MessageService) {\n    this.inputs = adminService.customerCols;\n  }\n\n  // This methos activate getCustomerByIdService and return the infromation from the DB into requestedCustomer variable\n  public getCustomer() {\n    console.log(this.requestedCustomer.id);\n    this.adminService.getCustomerByIdService(this.requestedCustomer.id).subscribe(\n      (resp) => {\n        this.requestedCustomer = resp.json();\n      },\n      (error) => {\n        this.messageService.add({severity: 'error', summary: 'Data Unavailable', detail: error._body});\n      });\n  }\n\n  ngOnInit() {\n    // this.inputs = [\n    //   { displayName: 'Id', field: 'id', type: 'number' , disabled: 'false' },\n    //   { displayName: 'Customer Name', field: 'custName' , type: 'text' , disabled: 'true'},\n    //   { displayName: 'Password', field: 'password' , type: 'password', disabled: 'true'}\n    // ];\n  }\n\n}\n","\nimport { Http, RequestOptions } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Company } from './../components/common/Company';\nimport { Customer } from './../components/common/Customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebApiAdminService {\n\n  companyCols: any[];\n  customerCols: any[];\n  prefixCompanyUrl = 'http://localhost:8080/admin/company/';\n  prefixCustomerUrl = 'http://localhost:8080/admin/customer/';\n  prefixLogOutUrl = 'http://localhost:8080/';\n\n\n  constructor( private http: Http) {\n\n    this.companyCols = [\n      { displayName: 'Id',        field: 'id',        type: 'number' , disabled: 'false' },\n      { displayName: 'Name',      field: 'compName' , type: 'text'   , disabled: 'true' },\n      { displayName: 'Password',  field: 'password' , type: 'text'   , disabled: 'true' },\n      { displayName: 'Email',     field: 'email',     type: 'email'  , disabled: 'true' }\n    ];\n\n    this.customerCols = [\n      { displayName: 'Id',        field: 'id',        type: 'number' , disabled: 'false' },\n      { displayName: 'Name',      field: 'custName' , type: 'text'  , disabled: 'true' },\n      { displayName: 'Password',  field: 'password' , type: 'text'  , disabled: 'true' }\n    ];\n  }\n\n\n  /**********************************************************************************/\n  /*********************Services for all the company methods*************************/\n  /**********************************************************************************/\n\n  // Get all the companies from the DB\n  public getAllCompaniesService() {\n    // return this.http.get('http://localhost:8080/company/get-all-companies');\n    return this.http.get(this.prefixCompanyUrl + 'get-all-companies');\n  }\n\n  public getCompanyByIdService(id: number) {\n    // return this.http.get('http://localhost:8080/company/get-company/' + id);\n    return this.http.get(this.prefixCompanyUrl + 'get-company/' + id);\n  }\n\n  // Add new company to the DB\n  public addNewCompanyService(company: Company) {\n    // return this.http.post('http://localhost:8080/company/create-company/', company);\n    return this.http.post(this.prefixCompanyUrl + 'create-company/', company);\n  }\n\n  // Delete a company to the DB\n  public deleteCompanyService(company: Company) {\n    const options = new RequestOptions({\n      body: company\n    });\n    // return this.http.delete ('http://localhost:8080/company/remove-company/' + company.id, options);\n    return this.http.delete (this.prefixCompanyUrl + 'remove-company/' + company.id, options);\n  }\n\n  public updateCompanyService(company: Company) {\n    // return this.http.put ('http://localhost:8080/company/update-company/' + company.id, company);\n    return this.http.put (this.prefixCompanyUrl + 'update-company/' + company.id, company);\n  }\n\n  /**********************************************************************************/\n  /*********************Services for all the customer methods*************************/\n  /**********************************************************************************/\n\n  // Get all the companies from the DB\n  public getAllCustomersService() {\n    // return this.http.get('http://localhost:8080/customer/get-all-customers');\n    return this.http.get(this.prefixCustomerUrl + 'get-all-customers');\n  }\n\n  public getCustomerByIdService(id: Number) {\n    // return this.http.get('http://localhost:8080/customer/get-customer/' + id);\n    return this.http.get(this.prefixCustomerUrl + 'get-customer/' + id);\n  }\n\n  // Add new company to the DB\n  public addNewCustomerService(customer: Customer) {\n    // return this.http.post('http://localhost:8080/customer/create-customer/', customer);\n    return this.http.post(this.prefixCustomerUrl + 'create-customer/', customer);\n  }\n\n  // Delete a company to the DB\n  public deleteCustomerService(customer: Customer) {\n    const options = new RequestOptions({\n      body: customer\n    });\n    // return this.http.delete ('http://localhost:8080/customer/remove-customer/' + customer.id, options);\n    return this.http.delete (this.prefixCustomerUrl + 'remove-customer/' + customer.id, options);\n  }\n\n  public updateCustomerService(customer: Customer) {\n    // return this.http.put ('http://localhost:8080/customer/update-customer/' + customer.id, customer);\n    return this.http.put (this.prefixCustomerUrl + 'update-customer/' + customer.id, customer);\n  }\n\n  /**********************************************************************************/\n  /*********************Services for the logout method*******************************/\n  /**********************************************************************************/\n  public logOutService(request, response) {\n    return this.http.post(this.prefixLogOutUrl + 'logout', request, response);\n  }\n\n\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}